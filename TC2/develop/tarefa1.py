# -*- coding: utf-8 -*-
"""TC2Ex1_heitor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dp9rmD2KPxDIcUiuGTNOnVzLBBUaR-RJ

Heitor Sanchez Fernandes - IA753
# Trabalho Computacional 2

## Primeira Tarefa

"""

from scipy.io import loadmat
import numpy as np
import matplotlib.pyplot as plt;plt.ion()

# (a)

# Carregar o arquivo
data = loadmat('../data/tc2ex1.mat')

print("Elementos do arquivo tc2ex1.mat: ",[key for key in data.keys()])

force = data['force']
spikes_all = data['spikes']
time = data['time']

# Selecionar os índices menores que 100
neurons_id_all = np.array(np.unique(spikes_all[:,1]),dtype=int)
neurons_id_100 = neurons_id_all[neurons_id_all<100]

# Selecionar apenas os índices dos neurônios com pelo menos 50 spikes
good_neurons_id = np.array([i for i in neurons_id_100 if len(spikes_all[spikes_all[:,1]==i])>50])

# Sortear 10 neurônios
#neurons_id = set(np.random.choice(good_neurons_id,10,replace=False))
neurons_id = np.random.choice(good_neurons_id,10,replace=False)
spikes = np.array([spk for spk in spikes_all if int(spk[1]) in neurons_id])
num_spikes = np.array([len(spikes[spikes[:,1]==i]) for i in neurons_id])
print('Neurônios sorteados: ',[n for n in neurons_id])
print('Número de spikes: ',[n for n in num_spikes])

# (b)

# Remover o transitório, força e tempo para tempo >= 1000 ms

estac_idx = time>=1000
time_est = time[estac_idx]
force_est = force[estac_idx]

# (i) e (ii)
force_avg = np.mean(force_est)
force_std = np.std(force_est)
force_cv = force_std/force_avg
print(u'Força:')
print(u'    Média: %.3f N'%force_avg)
print(u'    Desvio-padrão: %.3f N'%force_std)
print(u'    CV: %.3f %%'%(100*force_cv))

# (iii) e (iv)
spikes_nrns = np.array([np.array([spk[0] for spk in spikes[spikes[:,1]==nrn] if spk[0]>=1000]) for nrn in neurons_id])
isis = np.array([np.diff(spk) for spk in spikes_nrns])
isis_avg = np.array([np.mean(isis_n) for isis_n in isis])
isis_std = np.array([np.std(isis_n) for isis_n in isis])
isis_cv = isis_std/isis_avg
print(u'ISIs:')
print(u'    Média: %.3f ms'%isis_avg[0])
print(u'    Desvio-padrão: %.3f ms'%isis_std[0])
print(u'    CV: %.3f %%'%(100*isis_cv[0]))

# (v) coeficientes de assimetria e curtose dos isis
# (vi) histogramas dos isis
